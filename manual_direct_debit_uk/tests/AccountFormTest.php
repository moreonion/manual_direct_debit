<?php

namespace Drupal\manual_direct_debit_uk;

use Drupal\payment_context\PaymentContextInterface;
use Upal\DrupalUnitTestCase;

/**
 * Test rendering and validation of the account form.
 */
class AccountFormTest extends DrupalUnitTestCase {

  /**
   * Remove form errors generated by the test.
   */
  public function tearDown() {
    form_clear_error();
  }

  /**
   * Create a payment for test purposes.
   */
  protected function createPayment(array $settings = []) {
    $controller = payment_method_controller_load(manual_direct_debit_uk_payment_method_controller_info()[0]);
    $this->assertNotEmpty($controller->controller_data_defaults);
    $method = entity_create('payment_method', [
      'controller' => $controller,
      'controller_data' => $settings + $controller->controller_data_defaults,
    ]);
    $context = $this->createMock(PaymentContextInterface::class);
    $context->method('value')->willReturn('m');
    $payment = new \Payment([
      'method' => $method,
      'contextObj' => $this->createMock(PaymentContextInterface::class),
    ]);
    return $payment;
  }

  /**
   * Test that rendering the form element works.
   */
  public function testForm() {
    $payment = $this->createPayment();
    $form_obj = new AccountForm();
    $form_state = form_state_defaults();
    $form = $form_obj->form([], $form_state, $payment);
    $this->assertEquals(10, $form['account']['#maxlength']);

    $payment->method->controller_data['long_account_numbers'] = FALSE;
    $form = $form_obj->form([], $form_state, $payment);
    $this->assertEquals(8, $form['account']['#maxlength']);
  }

  /**
   * Process form and invoke validation.
   *
   * @param array $settings
   *   Non-default payment controller settings.
   * @param array $values
   *   Override some or all of the values. Values that were not supplied will
   *   get be filled with something valid.
   */
  protected function validate(array $settings = [], array $values = []) {
    form_clear_error();
    $payment = $this->createPayment($settings);
    $form_obj = new AccountForm();
    $form_state = form_state_defaults();
    $form = $form_obj->form([], $form_state, $payment);
    drupal_prepare_form('payment_method_form', $form, $form_state);
    drupal_process_form('payment_method_form', $form, $form_state);
    $form_state['values'] = $values + [
      'payment_date' => 1,
      'holder' => 'Tester',
      'bank_code' => '01-34-67',
      'account' => '01234567',
    ];
    $form_obj->validate($form, $form_state, $payment);
  }

  /**
   * Test form validation with valid input.
   */
  public function testValidatePass() {
    $this->validate();
    $this->assertNull(form_get_errors());
  }

  /**
   * Test validation with a 10 digit account number.
   */
  public function testValidateLongAccount() {
    $this->validate([], ['account' => '0123456789']);
    $this->assertNull(form_get_errors());
    $this->validate(['long_account_numbers' => FALSE], ['account' => '0123456789']);
    $this->assertArrayHasKey('account', form_get_errors());
  }

}
